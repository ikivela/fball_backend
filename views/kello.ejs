<!DOCTYPE html>
<html lang="fi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pelikello ja tulos</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        font-size: 2em;
        color: white;
        margin: 0;
        padding: 0;
        background-color: rgb(0, 0, 255, 0.95);
      }
      img {
        height: 100px;
        width: auto;
      }
      #logo {
        background-color: white;
      }
      #container {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #team-score-wrapper {
        border-style: solid;
        border-color: white;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      #team-score {
        display: flex;
        align-items: center;
        font-weight: normal;
      }

      .team {
        margin: 0 10px;
      }

      .score {
        margin: 0 10px;
      }

      #timer {
        background-color: white;
        color: black;
        padding: 0.1em;
        height: 100%;
        text-align: center; /* Teksti keskitetään */
      }
    </style>
  </head>
  <body>
    <div id="container">
      <div id="team-score-wrapper">
        <div id="team-score">
          <div id="logo"><img id="logoA" src="" alt="" /></div>
          <div id="teamA" class="team">Team A</div>
          <div id="score" class="score">0 - 0</div>
          <div id="teamB" class="team">Team B</div>
          <div id="logo"><img id="logoB" src="" alt="" /></div>
          <div id="timer">00:00</div>
        </div>
      </div>
      <div id="error"></div>
      <div id="txt"></div>
    </div>

    <script>

        let timer = null;
        let secondsLeft = 0;
        let reconnectInterval = 5000;
        let socket;

        <% if (ottelu_id) { %>
        let match_id = <%= ottelu_id %>;
        let team_A_name = "<%= team_A_name %>";
        let team_B_name = "<%= team_B_name %>";
        let team_A_crest = "<%= team_A_crest %>";
        let team_B_crest = "<%= team_B_crest %>";

        document.getElementById("teamA").innerText = team_A_name;
        document.getElementById("teamB").innerText = team_B_name;
        document.getElementById("logoA").src = team_A_crest;
        document.getElementById("logoB").src = team_B_crest;
        <% } %>

        let websocket_address = "wss://nchan.torneopal.com/salibandy/" + match_id;
        connectWebsocket(websocket_address);

        function updateOverlay(data) {
          // Poimi tarvittavat tiedot JSON:sta
          const teamAName = data.team_A_name;
          const teamBName = data.team_B_name;
          const scoreA = data.live_A;
          const scoreB = data.live_B;
          const logoA = data.club_A_crest;
          const logoB = data.club_B_crest;
          const liveTime = data.live_time_mmss.split(":");
          secondsLeft =
            parseInt(liveTime[0], 10) * 60 + parseInt(liveTime[1], 10);
          const timerOn = data.live_timer_on;

          // Päivitä HTML-elementit
          document.getElementById("teamA").innerText = teamAName;
          document.getElementById("teamB").innerText = teamBName;
          document.getElementById("score").innerText = `${scoreA} - ${scoreB}`;
          document.getElementById("timer").innerText = timer;
          document.getElementById("logoA").src = logoA;
          document.getElementById("logoB").src = logoB;


          // Päivitä ja käynnistä/ pysäytä pelikello
          if (timerOn == "1") {
            console.log("live_timer_on");
            if (!timer) {
              console.log("timer on!");
              // Käynnistä vain, jos ei jo käynnissä
              timer = setInterval(() => {
                secondsLeft++;
                updateTimer();
              }, 1000);
            }
          } else {
            console.log("timer off!");
            clearInterval(timer);
            timer = null;
          }

          updateTimer();
        }

          //console.log(JSON.stringify(data));
          /*data = {
          teamAName: "Nibacos",
          teamBName: "Jeppis FBC",
          live_A: "2",
          live_B: "0",

          live_time_mmss: "09:03",
          live_timer_on: "1",
        };*/

        function updateTimer() {
          const minutes = Math.floor(secondsLeft / 60)
            .toString()
            .padStart(2, "0");
          const seconds = (secondsLeft % 60).toString().padStart(2, "0");
          document.getElementById("timer").innerText = `${minutes}:${seconds}`;
        }

        function connectWebsocket(address) {
          socket = new WebSocket(
            websocket_address
          );
          
          socket.onmessage = function (event) {
            const data = JSON.parse(event.data);
            updateOverlay(data);
          }
          
          socket.onclose = function(event) {
            console.log("WebSocket-yhteys suljettu. Yritetään uudelleen yhdistää...");
            setTimeout(function() {
                connectWebSocket(); // Yritä uudelleen yhdistää
            }, reconnectInterval);
          }
          
          socket.onerror = function(error) {
            console.error("WebSocket virhe: ", error);
          };

          // Tapahtuma, jos WebSocket-yhteydessä tapahtuu virhe
          socket.onerror = function (error) {
            document.getElementById("error").innerText = `WebSocket-virhe:, ${error}`;
            console.log("WebSocket-virhe:", error);
          };
        }
    </script>
  </body>
</html>
